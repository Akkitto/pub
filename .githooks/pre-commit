#!/bin/bash
############################################################################
# Copyright Â© 2025  Daniel Braniewski                                      #
#                                                                          #
# This program is free software: you can redistribute it and/or modify     #
# it under the terms of the GNU Affero General Public License as           #
# published by the Free Software Foundation, either version 3 of the       #
# License, or (at your option) any later version.                          #
#                                                                          #
# This program is distributed in the hope that it will be useful,          #
# but WITHOUT ANY WARRANTY; without even the implied warranty of           #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             #
# GNU Affero General Public License for more details.                      #
#                                                                          #
# You should have received a copy of the GNU Affero General Public License #
# along with this program.  If not, see <https://www.gnu.org/licenses/>.   #
############################################################################

# Enforce front matter for new Markdown files and stamp RFC3339 `date`.
# - If a file does NOT start with TOML (+++) or YAML (---) front matter, ABORT commit
#   and show a helpful message. We no longer auto-add front matter.
# - If front matter exists but has no `date`, insert one (RFC3339 from ${TZ:-Europe/Berlin}).
# - Tolerates CRLF and surrounding spaces on fence lines.
# - Only affects files staged as newly added in Git.
#
# Zola date formats: RFC3339 or YYYY-MM-DD, unquoted in TOML.
# Docs:
# - Zola front matter: https://www.getzola.org/documentation/content/page/
# - TOML 1.0 offset datetime: https://toml.io/en/v1.0.0#offset-date-time
# - YAML 1.2 timestamps: https://yaml.org/spec/1.2.2/#timestamp
# - Git pathspec (:(glob) ... **/*.md): https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec
# - Git hooks (core.hooksPath): https://git-scm.com/docs/githooks


set -o errexit   # Exit immediately if a command exits with a non-zero status.
set -o nounset   # Treat unset variables as an error.
set -o pipefail  # Pipeline returns the exit status of the last command in the pipe that returned a non-zero status.

# Configuration
declare -r DEFAULT_TZ="Europe/Berlin"
# Example: 2025-08-15T18:45:12+02:00 (RFC3339, local TZ or DEFAULT_TZ)
declare -r STAMP="$(TZ="${TZ:-$DEFAULT_TZ}" date -Iseconds)"

stamp_file() {
  declare -r f="$1"
  [[ ! -f "$f" ]] && return 0
  [[ "$(basename "$f")" == "_index.md" ]] && return 0

  # Read first line (without subshell) and normalize for matching only
  IFS= read -r first_line < "$f" || true
  first_line="${first_line%$'\r'}"                                  # strip trailing CR
  first_line="${first_line#"${first_line%%[![:space:]]*}"}"        # ltrim
  first_line="${first_line%"${first_line##*[![:space:]]}"}"        # rtrim

  transform_toml() {
    awk -v stamp="$STAMP" '
      function has_cr(s) { return s ~ /\r$/ }
      function trim_spaces(s) {
        sub(/\r$/,"",s)
        gsub(/^[[:space:]]+|[[:space:]]+$/,"",s)
        return s
      }
      BEGIN { fm=0; have=0; inserted=0 }
      {
        orig = $0
        cr   = has_cr(orig) ? "\r" : ""
        line = trim_spaces(orig)

        if (NR==1 && line == "+++") { fm=1; print orig; next }

        if (fm==1) {
          # Empty date -> replace inline inside front matter
          if (line ~ /^date[[:space:]]*=[[:space:]]*$/) {
            printf "date = %s%s\n", stamp, cr
            have=1; inserted=1
            next
          }
          # Any non-empty date value present
          if (line ~ /^date[[:space:]]*=[[:space:]]*./) { have=1 }
          # Closing fence -> inject date before closing if missing
          if (line == "+++") {
            if (!have) { printf "date = %s%s\n", stamp, cr; inserted=1 }
            fm=0
          }
        }
        print orig
      }
      END { if (inserted) exit 0; else exit 2 }
    ' "$f" > "$f.tmp" || rc=$?
    rc=${rc:-0}
    if [[ $rc -eq 0 ]]; then
      mv "$f.tmp" "$f"
      git add -- "$f"
    else
      rm -f "$f.tmp"
    fi
  }

  transform_yaml() {
    awk -v stamp="$STAMP" '
      function has_cr(s) { return s ~ /\r$/ }
      function trim_spaces(s) {
        sub(/\r$/,"",s)
        gsub(/^[[:space:]]+|[[:space:]]+$/,"",s)
        return s
      }
      BEGIN { fm=0; have=0; inserted=0 }
      {
        orig = $0
        cr   = has_cr(orig) ? "\r" : ""
        line = trim_spaces(orig)

        if (NR==1 && line == "---") { fm=1; print orig; next }

        if (fm==1) {
          if (line ~ /^date[[:space:]]*:[[:space:]]*$/) {
            printf "date: %s%s\n", stamp, cr
            have=1; inserted=1
            next
          }
          if (line ~ /^date[[:space:]]*:[[:space:]]*./) { have=1 }
          if (line == "---") {
            if (!have) { printf "date: %s%s\n", stamp, cr; inserted=1 }
            fm=0
          }
        }
        print orig
      }
      END { if (inserted) exit 0; else exit 2 }
    ' "$f" > "$f.tmp" || rc=$?
    rc=${rc:-0}
    if [[ $rc -eq 0 ]]; then
      mv "$f.tmp" "$f"
      git add -- "$f"
    else
      rm -f "$f.tmp"
    fi
  }

  notify_missing_front_matter() {
    >&2 printf 'ERROR: %s\n' "${f}"
    >&2 printf '  Missing Zola front matter at the top (expected "+++" for TOML or "---" for YAML).\n'
    >&2 printf '  Please add front matter and stage the file again. The hook will then stamp the date.\n\n'
    >&2 printf '  Example YAML:\n'
    >&2 printf '    ---
    title: Demo
    date: # date will be auto-added by the hook (unquoted RFC3339)
    taxonomies:
      categories:
        - demo
      tags:
        - demo
    ---

'
    >&2 printf '  Example TOML:\n'
    >&2 printf '    +++
    title = "Demo"
    date = # date will be auto-added by the hook (unquoted RFC3339)
    [taxonomies]
    categories = ["demo"]
    tags = [
      "code",
      "example",
      "demo"
    ]
    +++

'
  }

  if [[ "$first_line" == "+++" ]]; then
    transform_toml; return 0
  elif [[ "$first_line" == "---" ]]; then
    transform_yaml; return 0
  else
    notify_missing_front_matter
    return 90
  fi
}

# Iterate null-delimited over newly added Markdown under content/**.md (recursive).
# Use Git pathspec magic :(glob) so ** works portably within Git.
had_error=0
found=0
while IFS= read -r -d '' f; do
  found=1
  if ! stamp_file "$f"; then
    had_error=1
  fi
# shellcheck disable=SC2046
done < <(git diff --cached --name-only -z --diff-filter=A -- ':(glob)content/**/*.md')

# If any file failed the check, abort commit.
if [[ $had_error -ne 0 ]]; then
  >&2 echo "pre-commit: Aborting due to missing front matter (see errors above)."
  >&2 echo "Hint: use 'git commit --no-verify' to bypass (not recommended)."
  exit 1
fi

# Nothing to do if loop never ran
[[ $found -eq 0 ]] && exit 0

exit 0
